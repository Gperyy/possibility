import requests
import streamlit as st
from streamlit_option_menu import option_menu
from streamlit_lottie import st_lottie

import shutil
import math
from pathlib import Path
from coin import CoinFlipSimulation
import plotly.figure_factory as ff
import numpy as np


def move_font_files():
    STREAMLIT_STATIC_PATH = Path(st.__path__[0]) / "static"
    CSS_PATH = STREAMLIT_STATIC_PATH / "assets/fonts/"
    if not CSS_PATH.is_dir():
        CSS_PATH.mkdir()

    css_file = CSS_PATH / "Monserrat"
    if not css_file.exists():
        shutil.copy("layout/Monserrat", css_file)


st.markdown(
    """
    <style>
@font-face {
font-family: 'Montserrat';
font-style: normal;
font-weight: normal;
src:url(https://fonts.google.com/specimen/Montserrat?query=mont)
}
html, body, [class*="css"] {
font-family: 'Montserrat'
}
</style>
""",
    unsafe_allow_html=True,
)

# option menu
selected = option_menu(
    menu_title="Main Menu",
    options=["Olasƒ±lƒ±k D√ºnyasƒ±", "Yazƒ±/Tura", "Zar Sim√ºlasyonu", "Monty Hall Oyunu", "ƒ∞leti≈üim"],
    default_index=0,
    icons=["book", "coin", "dice-3", "door-open", "envelope"],
    orientation="horizontal",
)
if selected == "Olasƒ±lƒ±k D√ºnyasƒ±":
    # alt baslik
    st.subheader("Olasƒ±lƒ±k Kuramƒ± Nasƒ±l Ortaya √áƒ±kmƒ±≈ütƒ±r?üßÆ ")

    # text
    st.write("Olasƒ±lƒ±k kuramƒ±, 17. y√ºzyƒ±lƒ±n ortalarƒ±ndan itibaren geli≈ümeye ba≈ülamƒ±≈ütƒ±r. √ñncelikle Fransƒ±z matematik√ßi "
             "Blaise Pascal ve Pierre de Fermat tarafƒ±ndan olasƒ±lƒ±k kuramƒ±nƒ±n temelleri atƒ±lmƒ±≈ütƒ±r. Pascal ve Fermat, "
             "bir√ßok matematik problemi √ß√∂zmek i√ßin olasƒ±lƒ±k kuramƒ±nƒ± kullanmaya ba≈ülamƒ±≈ülardƒ±r. √ñrneƒüin, Fermat, "
             "bir k√¢ƒüƒ±t oyununda kazanma olasƒ±lƒ±ƒüƒ±nƒ± hesaplamak i√ßin olasƒ±lƒ±k kuramƒ±nƒ± kullanmƒ±≈ütƒ±r.")
    st.write("I. y√ºzyƒ±lƒ±n sonlarƒ±na doƒüru, olasƒ±lƒ±k kuramƒ±, √∂zellikle Fransa'da, bir√ßok matematik√ßi tarafƒ±ndan daha "
             "ayrƒ±ntƒ±lƒ± olarak incelenmeye ba≈ülandƒ±. Bu √ßalƒ±≈ümalar, olasƒ±lƒ±k kuramƒ±nƒ±n daha geni≈ü bir alana "
             "uygulanabileceƒüini g√∂stermi≈ütir. √ñrneƒüin, 18. y√ºzyƒ±lda ƒ∞sve√ßli matematik√ßi Anders Johann Lindstr√∂m, "
             "olasƒ±lƒ±k kuramƒ±nƒ±n tahmin ve istatistik alanlarƒ±nda kullanƒ±labileceƒüini g√∂stermi≈ütir.")
    st.write("II. y√ºzyƒ±lda, ƒ∞ngiliz matematik√ßi Thomas Bayes, olasƒ±lƒ±k kuramƒ±nƒ±ntemelini olu≈üturan Bayes Teoremi'ni "
             "ortaya attƒ±. Bu teoremi, olaylar arasƒ±ndaki ili≈ükileri ve olasƒ±lƒ±klarƒ± modellemek i√ßin kullanƒ±lƒ±r. "
             "20. "
             "y√ºzyƒ±lƒ±n ba≈ülarƒ±nda, olasƒ±lƒ±k kuramƒ± ve istatistik alanlarƒ±ndaki √ßalƒ±≈ümalar hƒ±zlandƒ± ve bug√ºn "
             "olasƒ±lƒ±k "
             "kuramƒ± ve istatistik, bir√ßok alanda kullanƒ±lmaktadƒ±r.")


    def load_lottieurl(url: str) -> object:
        r = requests.get(url)
        if r.status_code != 200:
            return None
        return r.json()


    # animasyon
    lottie_question = load_lottieurl("https://assets6.lottiefiles.com/packages/lf20_u7yrcwlk.json")
    st_lottie(
        lottie_question,
        speed=1,
        reverse=False,
        loop=True,
        quality="low",  # medium ; high
        height=150
    )
    st.write("Belirli bir olay A i√ßin olasƒ±lƒ±k P(A) 0 ile 1 arasƒ±nda deƒüi≈üen bir sayƒ± ile temsil edilir.Hi√ß olanaksƒ±z "
             "bir olay i√ßin olasƒ±lƒ±k 0 olur ve kesinlikle olacak bir olayƒ±n olasƒ±lƒ±ƒüƒ± 1 olur. Bazƒ± istatik√ßicler bu "
             "u√ßsal olasƒ±lƒ±k deƒüerlerinin sadece teorik olduƒüunu iddia etmektedirler √ß√ºnk√º kabul ettikleri olasƒ±lƒ±k "
             "a√ßƒ±klamasƒ± deneylemelerle limitte g√∂resel √ßoklukluk (relatif frekans) deƒüerine dayanƒ±r.Diƒüer Bayes-tipi, "
             "√∂zellikle, olasƒ±lƒ±k a√ßƒ±klamasƒ±na g√∂re bu u√ßsal olasƒ±lƒ±k deƒüerlerini s√ºbjektif olarak d√º≈ü√ºnmek ve "
             "olaylara bu deƒüeleri koymak imkan dahilindedir.")

if selected == "Yazƒ±/Tura":
    st.subheader("Yazƒ±/Tura Deneyleri ü™ô")
    st.write("Kƒ±sa cevaplar alabilmek i√ßin en iyi yollardan biri de madeni paralarƒ± kullanmaktƒ± fakat ilk "
             "olarak Lidyalƒ±lar tarafƒ±ndan M√ñ 10.y√ºzyƒ±lda kullanƒ±lmaya ba≈ülanmƒ±≈ütƒ±r. Zaten kullanƒ±lmaya ba≈üladƒ±ƒüƒ±nda "
             "da Tanrƒ±larƒ±n insanlar hakkƒ±nda karar verdiƒüi bir ara√ß olarak d√º≈ü√ºn√ºlmemi≈ütir. Dokuz y√ºzyƒ±l sonra ise "
             "Julius Caesar (Sezar) yazƒ± turayƒ± ba≈ülatmƒ±≈ütƒ±r. Romalƒ±larƒ±n paralarƒ±nƒ±n bir y√ºz√ºnde Sezar‚Äôƒ±n kafasƒ±nƒ±n "
             "resmi vardƒ± ve para havaya atƒ±ldƒ±ƒüƒ±nda T√ºrk√ße‚Äôde ba≈ü anlamƒ±na gelen head kƒ±smƒ± yani Sezar‚Äôƒ±n kafasƒ±nƒ±n "
             "olduƒüu kƒ±sƒ±m gelirse dileƒüin Tanrƒ± tarafƒ±ndan yerine getirileceƒüi veya bir konudaki haklƒ± tarafƒ±n kim "
             "olduƒüunu g√∂steriyordu. Kƒ±saca kazanmak i√ßin head kƒ±smƒ± gelmeliydi.")
    st.write("Paranƒ±n havada yakalandƒ±ƒüƒ± klasik yazƒ± tura oyununda yalnƒ±z iki olasƒ±lƒ±k vardƒ±r, para ya yazƒ± ya tura "
             "gelir. Yazƒ±nƒ±n ya da turanƒ±n art arda birka√ß defa gelmesi doƒüal kar≈üƒ±lanƒ±r ancak yazƒ± tura atƒ±lmaya "
             "devam edilirse, yazƒ±larƒ±n ya da turalarƒ±n oranƒ± gitgide %100'ye yakla≈üƒ±r.  Paranƒ±n havada yakalanmadƒ±ƒüƒ± "
             "yazƒ± tura oyununda yere d√º≈üen paranƒ±n dik gelmesi ihtimali √ßok d√º≈ü√ºkt√ºr. Bu nedenle yazƒ± ve tura "
             "oranlarƒ± uzun vadede yine %50'ye √ßok yakƒ±n olacaktƒ±r.")


    def load_lottieurl(url: str) -> object:
        r = requests.get(url)
        if r.status_code != 200:
            return None
        return r.json()


    lottie_question = load_lottieurl("https://assets2.lottiefiles.com/packages/lf20_1l9gpfir.json")
    st_lottie(
        lottie_question,
        speed=1,
        reverse=False,
        loop=True,
        quality="low",  # medium ; high
        height=300
    )

    num_flips = st.slider('Ka√ß kere para atmak istediƒüinizi se√ßiniz', 1, 100)
    sim1 = CoinFlipSimulation(num_flips)
    simulation_result = sim1.run_simulation
    heads, tails = simulation_result.get("heads"), simulation_result.get("tails")
    st.write("Simulasyon Sonuclari:")
    st.success(f"heads {heads}")
    st.success(f"tails: {tails}")
    st.warning(f"sum: {[heads + tails]}")

    arr = sim1.plot_normal_distribution
    fig, ax = plt.subplots()
    ax.hist(arr, bins=20)

    st.pyplot(fig)

if selected == "Zar Sim√ºlasyonu":
    st.title(f"You have selected {selected}")
if selected == "Monty Hall Oyunu":
    st.title(f"You have selected {selected}")
if selected == "ƒ∞leti≈üim":
    st.title(f"You have selected {selected}")
